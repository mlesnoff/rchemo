exportPattern("^[[:alpha:]]+")

import(stats)
import(graphics)
import(grDevices)

import(data.table)
import(FNN)

importFrom("data.table", "data.table", "rbindlist", "setDF")
importFrom("FNN", "knn")
importFrom("signal", "sgolayfilt")

#importFrom("stats", "coef", "predict")
#importFrom("base", "transform")      ### ==> create error

S3method(predict, Dmnorm)

S3method(transform, Fda)
S3method(summary, Fda)

S3method(predict, Lda)
S3method(predict, Qda)

S3method(transform, Pca)
S3method(summary, Pca)
S3method(xfit, Pca)

S3method(transform, Kpca)
S3method(summary, Kpca)

S3method(coef, Lmr)
S3method(predict, Lmr)
S3method(predict, Lmrda)

S3method(transform, Plsr)
S3method(summary, Plsr)
S3method(coef, Plsr)
S3method(xfit, Plsr)
S3method(predict, Plsr)

S3method(predict, Plsrda)
S3method(predict, Plsdaprob)

S3method(transform, Kplsr)
S3method(coef, Kplsr)
S3method(predict, Kplsr)
S3method(predict, Kplsrda)

S3method(transform, Dkpls)
S3method(coef, Dkpls)
S3method(predict, Dkplsr)

S3method(coef, Rr)
S3method(predict, Rr)
S3method(predict, Rrda)

S3method(coef, Krr)
S3method(predict, Krr)
S3method(predict, Krrda)

S3method(coef, Dkrr)
S3method(predict, Dkrr)

S3method(predict, Lwplsr)
S3method(predict, Lwplsrda)

S3method(predict, Knnr)
S3method(predict, Knnda)

#exportMethods("transform", "coef", "predict")
#exportClasses("PcaOrtho", "PlsOrtho", 
#              "Dmnorm", "Lda", "Qda", "Plsda", "PlsDaProb",
#              "LwplsR")
#export(plskern)








